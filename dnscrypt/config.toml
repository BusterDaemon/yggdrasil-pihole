server_names = [ '2.dnscrypt-cert.opennic.i2pd.xyz', 'ams-dnscrypt-nl', 'ams-doh-nl', 'anon-cs-fr', 'anon-cs-nl', 'anon-gombadi-tokyo', 'anon-gombadi-tokyo-ipv6', 'bebas-unfiltered-dnscrypt', 'bebas-unfiltered-doh' ]
listen_addresses = ['0.0.0.0:55']
max_clients = 250
ipv4_servers = true
ipv6_servers = true
dnscrypt_servers = true
doh_servers = true
#odoh_servers = true
require_dnssec = true
require_nolog = true
require_nofilter = false
disabled_server_names = []
timeout = 5000
keepalive = 30
log_level = 2
cert_refresh_delay = 240
dnscrypt_ephemeral_keys = true 
tls_cipher_suite = [52393, 49195]
#bootstrap_resolvers = ['51.83.172.84:53', '151.80.222.79:53', '[2001:470:71:6dc::53]:53', '[2001:470:1f15:b80::53]:53', '[316:f9e0:f22e:a74f::53]:53']
ignore_system_dns = true
netprobe_timeout = 60
netprobe_address = '9.9.9.9:53'
log_files_max_size = 10
log_files_max_age = 7
log_files_max_backups = 1
block_ipv6 = false
block_unqualified = true
block_undelegated = true
reject_ttl = 10
cache = true
cache_size = 4096
cache_min_ttl = 2400
cache_max_ttl = 86400
cache_neg_min_ttl = 60
cache_neg_max_ttl = 600
http_proxy = 'http://[324:71e:281a:9ed3::fa11]:3128'
[sources]
  [sources.'opennic']
    urls = ['https://download.dnscrypt.info/dnscrypt-resolvers/v3/opennic.md']
    cache_file = 'opennic.md'
    minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
  [sources.'public-resolvers']
    urls = ['https://raw.githubusercontent.com/DNSCrypt/dnscrypt-resolvers/master/v3/public-resolvers.md', 'https://download.dnscrypt.info/resolvers-list/v3/public-resolvers.md']
    cache_file = 'public-resolvers.md'
    minisign_key = 'RWQf6LRCGA9i53mlYecO4IzT51TGPpvWucNSCh1CBM0QTaLn73Y7GFO3'
    refresh_delay = 72
    prefix = ''

[broken_implementations]

## Cisco servers currently cannot handle queries larger than 1472 bytes, and don't
## truncate responses larger than questions as expected by the DNSCrypt protocol.
## This prevents large responses from being received over UDP and over relays.
##
## Older versions of the `dnsdist` server software had a bug with queries larger
## than 1500 bytes. This is fixed since `dnsdist` version 1.5.0, but
## some server may still run an outdated version.
##
## The list below enables workarounds to make non-relayed usage more reliable
## until the servers are fixed.

fragments_blocked = ['cisco', 'cisco-ipv6', 'cisco-familyshield', 'cisco-familyshield-ipv6', 'cleanbrowsing-adult', 'cleanbrowsing-adult-ipv6', 'cleanbrowsing-family', 'cleanbrowsing-family-ipv6', 'cleanbrowsing-security', 'cleanbrowsing-security-ipv6']

[anonymized_dns]
routes = [
   { server_name='*', via=[ '2.dnscrypt-cert.opennic.i2pd.xyz', 'ams-dnscrypt-nl', 'ams-doh-nl', 'anon-cs-fr', 'anon-cs-nl', 'anon-gombadi-tokyo', 'anon-gombadi-tokyo-ipv6', 'bebas-unfiltered-dnscrypt', 'bebas-unfiltered-doh' ] }

]


## Skip resolvers incompatible with anonymization instead of using them directly

skip_incompatible = false


## If public server certificates for a non-conformant server cannot be
## retrieved via a relay, try getting them directly. Actual queries
## will then always go through relays.

# direct_cert_fallback = false



###############################
#            DNS64            #
###############################

## DNS64 is a mechanism for synthesizing AAAA records from A records.
## It is used with an IPv6/IPv4 translator to enable client-server
## communication between an IPv6-only client and an IPv4-only server,
## without requiring any changes to either the IPv6 or the IPv4 node,
## for the class of applications that work through NATs.
##
## There are two options to synthesize such records:
## Option 1: Using a set of static IPv6 prefixes;
## Option 2: By discovering the IPv6 prefix from DNS64-enabled resolver.
##
## If both options are configured - only static prefixes are used.
## (Ref. RFC6147, RFC6052, RFC7050)
##
## Do not enable unless you know what DNS64 is and why you need it, or else
## you won't be able to connect to anything at all.

[dns64]

## Static prefix(es) as Pref64::/n CIDRs

# prefix = ['64:ff9b::/96']

## DNS64-enabled resolver(s) to discover Pref64::/n CIDRs
## These resolvers are used to query for Well-Known IPv4-only Name (WKN) "ipv4only.arpa." to discover only.
## Set with your ISP's resolvers in case of custom prefixes (other than Well-Known Prefix 64:ff9b::/96).
## IMPORTANT: Default resolvers listed below support Well-Known Prefix 64:ff9b::/96 only.

# resolver = ['[2606:4700:4700::64]:53', '[2001:4860:4860::64]:53']



########################################
#            Static entries            #
########################################

## Optional, local, static list of additional servers
## Mostly useful for testing your own servers.

[static]
  [static.'opennic-1-stamp']
    stamp = 'sdns://AQcAAAAAAAAAEDUxLjgzLjE3Mi44NDo0NDMgQY79Ny3JT2282aICzWf550RStCZR4fBozFZcBoQRBZAhMi5kbnNjcnlwdC1jZXJ0Lm9wZW5uaWMyLmkycGQueHl6'
  [static.'opennic-2-stamp']
    stamp = 'sdns://gRA1MS44My4xNzIuODQ6NDQz'

  # [static.myserver]
  #   stamp = 'sdns://AQcAAAAAAAAAAAAQMi5kbnNjcnlwdC1jZXJ0Lg'
